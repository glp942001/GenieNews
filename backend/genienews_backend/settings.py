"""
Django settings for genienews_backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-jml3u_s!1czxm2!w-0+t-3k$aqe_h)ntr$#p-e0pppov*_e^jl')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'corsheaders',
    'pgvector.django',
    # Local apps
    'news',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'genienews_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'genienews_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'genienews'),
        'USER': os.getenv('DB_USER', 'genienews_user'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'genienews_password'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# Celery Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Celery Beat Schedule for Weekly Feed Ingestion
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'ingest-feeds-weekly': {
        'task': 'news.tasks.ingest_all_feeds_task',
        'schedule': crontab(day_of_week=1, hour=2, minute=0),  # Every Monday at 2 AM
    },
    'fetch-missing-content-weekly': {
        'task': 'news.tasks.fetch_missing_content_task',
        'schedule': crontab(day_of_week=1, hour=4, minute=0),  # Every Monday at 4 AM (after ingestion)
    },
    'curate-articles-hourly': {
        'task': 'news.tasks.curate_articles_task',
        'schedule': crontab(minute=0),  # Every hour on the hour
    },
}

# Feed Ingestion Configuration
FEED_FETCH_TIMEOUT = int(os.getenv('FEED_FETCH_TIMEOUT', '30'))
FEED_USER_AGENT = os.getenv('FEED_USER_AGENT', 'GenieNewsBot/1.0')
CONTENT_FETCH_TIMEOUT = int(os.getenv('CONTENT_FETCH_TIMEOUT', '60'))
MAX_RETRIES = int(os.getenv('MAX_RETRIES', '3'))
ENABLE_PLAYWRIGHT = os.getenv('ENABLE_PLAYWRIGHT', 'false').lower() == 'true'
PLAYWRIGHT_HEADLESS = os.getenv('PLAYWRIGHT_HEADLESS', 'true').lower() == 'true'
RATE_LIMIT_DELAY = int(os.getenv('RATE_LIMIT_DELAY', '3'))

# OpenAI Configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', 'sk-mock-key-replace-later')
AI_MODEL = os.getenv('AI_MODEL', 'gpt-4')
EMBEDDING_MODEL = os.getenv('EMBEDDING_MODEL', 'text-embedding-3-small')
AI_TEMPERATURE = float(os.getenv('AI_TEMPERATURE', '0.3'))
AI_MAX_TOKENS = int(os.getenv('AI_MAX_TOKENS', '1000'))

# AI Curation Configuration
AI_RELEVANCE_KEYWORDS = os.getenv(
    'AI_RELEVANCE_KEYWORDS',
    'artificial intelligence,machine learning,AI,deep learning,neural networks,'
    'LLM,GPT,transformers,computer vision,NLP,natural language processing,'
    'robotics,AI research,generative AI,large language model,autonomous systems,'
    'reinforcement learning'
).split(',')
AI_RELEVANCE_THRESHOLD = float(os.getenv('AI_RELEVANCE_THRESHOLD', '0.3'))
AI_BATCH_SIZE = int(os.getenv('AI_BATCH_SIZE', '20'))
